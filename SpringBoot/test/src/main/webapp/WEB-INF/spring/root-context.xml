<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<context:property-placeholder
		location="classpath:keyproperties/*" />
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- 여기서는 그냥 bean으로 사용함 <bean id="testDto3" class="kh.mclass.ttt.sub.model.dto.TestDto" 
		init-method="init"> <constructor-arg name="a2" value="3생성시값2"/> <property 
		name="a1" value="3생성시값1"/> <property name="testflieDto" ref="testFileDto"/> 
		</bean> <bean id="testDto2" class="kh.mclass.ttt.sub.model.dto.TestDto" init-method="init"> 
		<constructor-arg name="a2" value="2생성시값2"/> <property name="a1" value="2생성시값1"/> 
		<property name="testflieDto" ref="testFileDto"/> </bean> <bean id="testDto" 
		class="kh.mclass.ttt.sub.model.dto.TestDto" init-method="init"> <constructor-arg 
		name="a2" value="생성시값2222"/> <property name="a1" value="생성시값1111"/> <property 
		name="testflieDto" ref="testFileDto"/> </bean> <bean id="testFileDto" class="kh.mclass.ttt.sub.model.dto.TestFileDto"> 
		<constructor-arg name="filePath" value="aaa.jpg"/> <constructor-arg name="fileType" 
		value="jpg"/> </bean> -->

	<!-- DB연동 관련 Bean들 -->
	<!-- DBCP -->
	<bean class="org.apache.commons.dbcp2.BasicDataSource"
		id="dataSource" destroy-method="close">
		<property name="driverClassName"
			value="${db.driverClassName}"></property>
		<property name="url" value="${db.url}"></property>
		<property name="username" value="${db.username}"></property>
		<property name="password" value="${db.password}"></property>
	</bean>

	<!-- mybatis -->
	<bean class="org.mybatis.spring.SqlSessionFactoryBean"
		id="sqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation"
			value="classpath:mybatis-config.xml"></property>
	</bean>
	<bean class="org.mybatis.spring.SqlSessionTemplate"
		id="sqlSession">
		<constructor-arg name="sqlSessionFactory"
			ref="sqlSessionFactoryBean" />
	</bean>

	<bean
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		id="transactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>


	<!-- 방법1 @Transactional 붙은 메소드 또는 클래스 -->
	<tx:annotation-driven />

	<!-- 방법2 -->
	<!-- @Transactional을 활성화 시키기 위함 -->
	<!-- <tx:advice id="txAdivice" transaction-manager="transactionManager"> -->
	<!-- 반드시 transactionManager이 이름을 사용해야함 -->
	<!-- transactionManager는 빈객체 이름임 따라서 bean에 담아와야함 -->
	<!--<tx:attributes> <tx:method name="insert*" rollback-for="Exception"/> 
		<tx:method name="update*" rollback-for="Exception"/> <tx:method name="delete*" 
		rollback-for="Exception"/> <tx:method name="select*" rollback-for="Exception"/> 
		</tx:attributes> </tx:advice> -->
	<!--<aop:config> 접근 리턴타입 패키지명 클래스명 / 점 두개는 여러개 있을수도 없을수도 있음 *모양은 반드시 1개이상 
		/ .이랑 Service사이에는 *(한글자 이상의 메소드 명(+Service)이 있어야함) (..)안에 자료형으로 제한 할 수 있음 
		(String, Integer) <aop:pointcut expression="execution(public * kh..*Service.*(..))" 
		id="serviceMethod"/> <aop:advisor advice-ref="txAdivice" pointcut-ref="serviceMethod"/> 
		pointcut에 advice를 걸어주겠다 </aop:config> -->

	
	<bean class="kh.mclass.ttt.common.LoginIntercepter" id="loginIntercepter"></bean>
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**"/> <!-- /**/* 이렇게 쓴 곳도 있음... depth에 유의하기 -->
			<mvc:exclude-mapping path="/login"/> <!--  -->
			<mvc:exclude-mapping path="/join"/>
			<mvc:exclude-mapping path="/main/*"/>
			<mvc:exclude-mapping path="/resources/**"/>
			<ref bean="loginIntercepter"/>
		</mvc:interceptor>
	</mvc:interceptors>
</beans>
